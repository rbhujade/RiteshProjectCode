=================solid principle==========================
The SOLID principles are five design principles for building maintainable, scalable, and robust object-oriented software. 
 widely used in C#,especially when adhering to clean code practices.

single responsiblity principle
open closed principle
lisko substitution principle
interface segregation principle
dependency inversion principle


=====single responsiblity========
class should have only one responsiblity or only one reason to change.
This means that every class in your code should have only one job.
Everything in that class should be related to a single purpose.
it makes your code easier to understand ,test and maintain.

public class Employee
{
    public string Name { get; set; }
    public int ID { get; set; }

    // Violates SRP: Handles both employee data and report generation
    public void GenerateReport()
    {
        // Logic for generating report
    }
}

// Correct Implementation:
class EMP
{
	public int Id {get; set;}
	public string Name {get; set}
}
public class GenerateReport
{
	public void Generate(EMP emp)
	{
	}
} 

=========open/closed principle===========
class/method should be open for extension but closed for modification.
it ensure that you can add new feature without altering existing code,reducing the risk of introducing bugs.

public abstract class Shape
{
	public abstract double CalculateArea();
}
public class Circle : Shape
{
	public double radius {get; set;}
	public override double CalculateArea()=> Math.PI *radius * radius;
}
public class Rectangle : Shape
{
	public double width { get; set ;}
	public double length {get;set;}
	public override double CalculateArea()=> width * length;
}
// Adding a new shape (Triangle) without modifying existing classes
public class Triangle : Shape
{
	public double Base { get ; set ;}
	public double Height { get; set;}
	public override double CalculateArea()=> 0.5 *Base*Height;
}



===========Lisko substitution principle============
Derived class must be substitutable for its base class.
This ensure that derived classes extend functionality without breaking the behavior of base class.
It ensures that a derived class does not affect the behavior of the parent class.
you should be able to use any derived class instead of a parent class and have it behave in the same manner without modification.

public abstract class Bird
{
    public abstract void Fly();
}

public class Sparrow : Bird
{
    public override void Fly()
    {
        Console.WriteLine("Sparrow is flying.");
    }
}

public class Ostrich : Bird
{
    // Violates LSP: Ostrich cannot fly
    public override void Fly()
    {
        throw new NotImplementedException();
    }
}

// Correct Implementation:
public abstract class Bird {}
interface Iflyable
{
	void Fly();
}
public class Sparrow :Bird,Iflyable
{
	public void Fly()
	{
		Console.WriteLine("Sparrow is flying.");
	}
}
public class Ostrich : Bird
{
	// Ostrich does not implement IFlyable
}


=============Interface segregation principle===============
A class should not be forced to implement interface it does not use.
Avoid creating large, unwidely iterfaces and promote smaller ,more focused  interfaces.

// Violates ISP: Forces all animals to implement unnecessary methods
public interface IAnimal
{
    void Fly();
    void Swim();
}

public class Dog : IAnimal
{
    public void Fly()
    {
        throw new NotImplementedException();
    }

    public void Swim()
    {
        Console.WriteLine("Dog is swimming.");
    }
}

// Correct Implementation:
public interface Iflyable { void Fly() }
public interface ISwimable { void Swim() }
public class Dog : ISwimable   //Dog can not fly
{
	public void Swim()
	{
		Console.WriteLine("Dog is swimming.");
	}
}


============ Dependency inversion principle ===============
High-level modules should not depend on low-level modules.Both should depend on abstractions.
Reduce tight coupling between modules and make the code more flexible and testable.

// Violates DIP: High-level class depends on a low-level class
public class EmailService;
{
    public void SendEmail(string message)
    {
        Console.WriteLine($"Sending email: {message}");
    }
}

public class Notification
{
    private EmailService _emailService;

    public Notification()
    {
        _emailService = new EmailService();
    }

    public void Notify(string message)
    {
        _emailService.SendEmail(message);
    }
}

// Correct Implementation:
interface IMessageService 
{ 
	void SendMsg(string msg) ;
}

public class MessageService : IMessageService
{
	public void SendMsg(string message)
	{
		Console.WriteLine($"Sending email: {message}");
	}
}

public class Notification
{
	public IMessageService _messageService;
	
	public Notification(IMessageService messageService)
	{
		_messageService = messageService;
	}
	
	public void Notify(string msg)
	{
		_messageService.SendMsg(msg);
	}
}













Scaffold-DbContext "Server=(localdb)\\MSSQLLocalDB;Database=Sample_DB;Integrated Security=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models
dotnet ef dbcontext scaffold "Server=(localdb)\\MSSQLLocalDB;Database=Sample_DB;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -o Models

"Server=(localdb)\\MSSQLLocalDB;Database=Sample_DB;Integrated Security=True;Trusted_Connection=True;"
Scaffold-DbContext "Server=(localdb)\MSSQLLocalDB;Database=Sample_DB;Integrated Security=True;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models


Severity	Code	Description	Project	File	Line	Suppression State
Error		Package restore failed. Rolling back package changes for 'FluentValidation'.	

A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: SQL Network Interfaces, error: 50 - Local Database Runtime error occurred. Specified LocalDB instance name is invalid.
)			
